using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Entity;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace MyFilmDatabase.Views
{
    public partial class MainView : Form
    {
        private Models.DatabaseContext _context;
        public MainView()
        {
            InitializeComponent();
        }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            _context = new Models.DatabaseContext();

            // Call the Load method to get the data for the given DbSet 
            // from the database. 
            // The data is materialized as entities. The entities are managed by 
            // the DbContext instance. 
            _context.Films.Load();

            // Bind the categoryBindingSource.DataSource to 
            // all the Unchanged, Modified and Added Category objects that 
            // are currently tracked by the DbContext.
            // Note that we need to call ToBindingList() on the 
            // ObservableCollection<TEntity> returned by
            // the DbSet.Local property to get the BindingList<T>
            // in order to facilitate two-way binding in WinForms.
            this.filmBindingSource.DataSource =
                _context.Films.Local.ToBindingList();
        }

        protected override void OnClosing(CancelEventArgs e)
        {
            base.OnClosing(e);
            this._context.Dispose();
        }

        private void filmBindingNavigatorSaveItem_Click(object sender, EventArgs e)
        {
            this.Validate();

            // Currently, the Entity Framework doesn’t mark the entities that are removed
            //    from a navigation property (in our example the Products) as deleted in the context. 
            // The following code uses LINQ to Objects against the Local collection 
            //    to find all products and marks any that do not have a Category reference as deleted. 
            // The ToList call is required because otherwise the collection will be modified 
            //    by the Remove call while it is being enumerated. 
            // In most other situations you can do LINQ to Objects directly against the Local
            //    property without using ToList first.
            foreach (var films in _context.Films.Local.ToList())
            {
                if (films.Actors == null)
                {
                    _context.Films.Remove(films);
                }
            }

            // Save the changes to the database.
            this._context.SaveChanges();

            // Refresh the controls to show the values         
            // that were generated by the database.
            //this.filmDataGridView.Refresh();
            //this.actorsDataGridView.Refresh();
        }

        private void filmDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }
    }
}
